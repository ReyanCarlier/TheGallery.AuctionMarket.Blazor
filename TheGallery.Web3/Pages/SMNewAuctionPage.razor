@page "/new-sm-auction"
@using Nethereum.Web3
@using System.Numerics
@using TheGallery.Web3UI.DialogTemplates
@using TheGallery.Web3UI.FunctionOutputs

@inject AuctionService          AuctionService
@inject MockNFTService          MockNFTService
@inject IMetaMaskService        MetaMaskService
@inject IDialogService          DialogService
@inject SMAuctionFactoryService SMAuctionFactoryService

<MudDialog/>

<MudText Typo="Typo.h3">Create an Auction</MudText>
@if (!isMetaMaskConnected)
{
    <MudText>You must be connected to MetaMask to access this page.</MudText>
}
else if (isContractOwner)
{
    <MudLink Href="/new-auction">You're the owner of AuctionFactory, you might want to start an auction here.</MudLink>
}
else
{
    <MudForm Model="@auction">
        <MudTextField T="uint" Label="NFT ID" @bind-Value="@auction.TokenId" />
        <MudTextField T="decimal" Label="Floor Price" @bind-Value="@auction.FloorPrice" />
        <MudTextField T="decimal" Label="Reserve Price" @bind-Value="@auction.ReservePrice" />
        <MudTextField T="uint" Label="Coefficient" @bind-Value="@auction.Coefficient" />
        <MudCheckBox T="bool" Label="Buy Now" @bind-Value="@auction.BuyNow" />
    </MudForm>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@AskForConfirmation" Disabled="@(!_canCreateAuction)">
        @(_canCreateAuction ? "Create Auction" : "Auction Ongoing")
    </MudButton>
}

@code {
    private bool isMetaMaskConnected = false;
    private bool isContractOwner = false;
    private string walletAddress = string.Empty;
    private bool _canCreateAuction = true;

    Auction auction = new Auction();

    protected override async Task OnInitializedAsync()
    {
        isMetaMaskConnected = await MetaMaskService.IsSiteConnected();
        if (!isMetaMaskConnected)
            await MetaMaskService.ConnectMetaMask();
        walletAddress = await MetaMaskService.GetSelectedAddress();
    }

    private async Task InitializeAuctionCreation()
    {
        if (auction.TokenId <= 0 || auction.FloorPrice <= 0 || auction.ReservePrice <= 0 || auction.Coefficient <= 0)
            return;
        BigInteger floorPriceWei = Web3.Convert.ToWei(auction.FloorPrice);
        BigInteger reservePriceWei = Web3.Convert.ToWei(auction.ReservePrice);
        var tx = await SMAuctionFactoryService.CreateAuctionAsync(auction);
    }

    private async Task AskForConfirmation()
    {
        var parameters = new DialogParameters();
        parameters.Add("auction", auction);
        var dialog = await DialogService.ShowAsync<UserCreateAuctionDialog>("New Auction", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            await InitializeAuctionCreation();
        }
    }
}
